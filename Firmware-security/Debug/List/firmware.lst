
AVRASM ver. 2.1.30  D:\1code\ATMELMega_C_Laser_security_system\Firmware-security\Debug\List\firmware.asm Mon May 29 09:09:20 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000047 6573
000048 736e
000049 726f
00004a 6c20      	.DB  0x73,0x65,0x6E,0x73,0x6F,0x72,0x20,0x6C
00004b 6769
00004c 7468
00004d 203a
00004e 7525      	.DB  0x69,0x67,0x68,0x74,0x3A,0x20,0x25,0x75
00004f 202c
000050 6172
000051 646e
000052 6d6f      	.DB  0x2C,0x20,0x72,0x61,0x6E,0x64,0x6F,0x6D
000053 635f
000054 6568
000055 6b63
000056 203a      	.DB  0x5F,0x63,0x68,0x65,0x63,0x6B,0x3A,0x20
000057 6425
000058 202c
000059 6e65
00005a 5f76      	.DB  0x25,0x64,0x2C,0x20,0x65,0x6E,0x76,0x5F
00005b 696c
00005c 6867
00005d 3a74
00005e 2520      	.DB  0x6C,0x69,0x67,0x68,0x74,0x3A,0x20,0x25
00005f 2075
000060 000a      	.DB  0x75,0x20,0xA,0x0
                 _0x2020060:
D:\1code\ATMELMega_C_Laser_security_system\Firmware-security\Debug\List\firmware.asm(1476): warning: .cseg .db misalignment - padding zero byte
000061 0001      	.DB  0x1
                 _0x2020000:
000062 4e2d
000063 4e41
000064 4900
000065 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\1code\ATMELMega_C_Laser_security_system\Firmware-security\Debug\List\firmware.asm(1479): warning: .cseg .db misalignment - padding zero byte
000066 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000067 0001      	.DW  0x01
000068 0200      	.DW  __seed_G101
000069 00c2      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00006a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006b 94f8      	CLI
00006c 27ee      	CLR  R30
00006d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006e e0f1      	LDI  R31,1
00006f bff5      	OUT  MCUCR,R31
000070 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000071 e08d      	LDI  R24,(14-2)+1
000072 e0a2      	LDI  R26,2
000073 27bb      	CLR  R27
                 __CLEAR_REG:
000074 93ed      	ST   X+,R30
000075 958a      	DEC  R24
000076 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000077 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000078 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000079 e0a0      	LDI  R26,LOW(__SRAM_START)
00007a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007b 93ed      	ST   X+,R30
00007c 9701      	SBIW R24,1
00007d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007e ecee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000080 9185      	LPM  R24,Z+
000081 9195      	LPM  R25,Z+
000082 9700      	SBIW R24,0
000083 f061      	BREQ __GLOBAL_INI_END
000084 91a5      	LPM  R26,Z+
000085 91b5      	LPM  R27,Z+
000086 9005      	LPM  R0,Z+
000087 9015      	LPM  R1,Z+
000088 01bf      	MOVW R22,R30
000089 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008a 9005      	LPM  R0,Z+
00008b 920d      	ST   X+,R0
00008c 9701      	SBIW R24,1
00008d f7e1      	BRNE __GLOBAL_INI_LOOP
00008e 01fb      	MOVW R30,R22
00008f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000090 e0e0      	LDI  R30,__GPIOR0_INIT
000091 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000092 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000093 bfed      	OUT  SPL,R30
000094 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000095 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000096 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000097 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000098 940c 009a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void main(void) {
                 ; 0000 0006 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0007 
                 ; 0000 0008 // initialize variable for light on sensor
                 ; 0000 0009 unsigned int light = 0;
                 ; 0000 000A 
                 ; 0000 000B // initialize variable for the light in the environment value
                 ; 0000 000C unsigned int env_light = 0;
                 ; 0000 000D 
                 ; 0000 000E // initialize counters for random + spoof checks + first run of the loop
                 ; 0000 000F char firstRun = 0;
                 ; 0000 0010 char randomCheck_counter = rand() % 70;
                 ; 0000 0011 
                 ; 0000 0012 
                 ; 0000 0013 // initialize ports on mcu and the adc
                 ; 0000 0014 initialise_mcu();
                 ;	light -> R16,R17
                 ;	env_light -> R18,R19
                 ;	firstRun -> R21
                 ;	randomCheck_counter -> R20
                +
00009a e000     +LDI R16 , LOW ( 0 )
00009b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00009c e020     +LDI R18 , LOW ( 0 )
00009d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00009e e050      	LDI  R21,0
00009f d279      	RCALL SUBOPT_0x0
0000a0 d075      	RCALL _initialise_mcu
                 ; 0000 0015 
                 ; 0000 0016 // reads the light from the sensor without laser shining on it
                 ; 0000 0017 env_light = read_light();
0000a1 d057      	RCALL _read_light
0000a2 019f      	MOVW R18,R30
                 ; 0000 0018 delay_ms(100);
0000a3 e6a4      	LDI  R26,LOW(100)
0000a4 e0b0      	LDI  R27,0
0000a5 d2f3      	RCALL _delay_ms
                 ; 0000 0019 
                 ; 0000 001A // turn on the laser
                 ; 0000 001B PORTD.4 = 1;
0000a6 9a5c      	SBI  0xB,4
                 ; 0000 001C 
                 ; 0000 001D 
                 ; 0000 001E while (1) {
                 _0x5:
                 ; 0000 001F 
                 ; 0000 0020 // if it is the first loop, delay the read of adc by 100ms
                 ; 0000 0021 if (firstRun == 0) {
0000a7 3050      	CPI  R21,0
0000a8 f421      	BRNE _0x8
                 ; 0000 0022 firstRun = 1;
0000a9 e051      	LDI  R21,LOW(1)
                 ; 0000 0023 delay_ms(100);
0000aa e6a4      	LDI  R26,LOW(100)
0000ab e0b0      	LDI  R27,0
0000ac d2ec      	RCALL _delay_ms
                 ; 0000 0024 }
                 ; 0000 0025 
                 ; 0000 0026 // reads the light from the sensor with laser shining on it
                 ; 0000 0027 light = read_light();
                 _0x8:
0000ad d04b      	RCALL _read_light
0000ae 018f      	MOVW R16,R30
                 ; 0000 0028 
                 ; 0000 0029 // debug printf
                 ; 0000 002A printf("sensor light: %u, random_check: %d, env_light: %u \n", light, randomCheck_counter, env_light);
                +
0000af e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b1 93fa      	ST   -Y,R31
0000b2 93ea      	ST   -Y,R30
0000b3 01f8      	MOVW R30,R16
0000b4 2766      	CLR  R22
0000b5 2777      	CLR  R23
0000b6 d2dd      	RCALL __PUTPARD1
0000b7 2fe4      	MOV  R30,R20
0000b8 27ff      	CLR  R31
0000b9 2766      	CLR  R22
0000ba 2777      	CLR  R23
0000bb d2d8      	RCALL __PUTPARD1
0000bc 01f9      	MOVW R30,R18
0000bd 2766      	CLR  R22
0000be 2777      	CLR  R23
0000bf d2d4      	RCALL __PUTPARD1
0000c0 e08c      	LDI  R24,12
0000c1 d1fb      	RCALL _printf
0000c2 962e      	ADIW R28,14
                 ; 0000 002B 
                 ; 0000 002C // checks if the laser is shining on the sensor
                 ; 0000 002D if (light <= env_light) {
                +
0000c3 1720     +CP R18 , R16
0000c4 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0000c5 f020      	BRLO _0x9
                 ; 0000 002E // Turn on red led
                 ; 0000 002F PORTD.6 = 1;
0000c6 9a5e      	SBI  0xB,6
                 ; 0000 0030 // Turn off blue led
                 ; 0000 0031 PORTB.0 = 1;
0000c7 9a28      	SBI  0x5,0
                 ; 0000 0032 while(1){
                 _0xE:
                 ; 0000 0033 ring_alarm();
0000c8 d036      	RCALL _ring_alarm
                 ; 0000 0034 }
0000c9 cffe      	RJMP _0xE
                 ; 0000 0035 }
                 ; 0000 0036 
                 ; 0000 0037 // checks randomly within maximum 30s if the light in the environment has changed
                 ; 0000 0038 if (randomCheck_counter == 0) {
                 _0x9:
0000ca 3040      	CPI  R20,0
0000cb f469      	BRNE _0x11
                 ; 0000 0039 randomCheck_counter = rand() % 70;
0000cc d24c      	RCALL SUBOPT_0x0
                 ; 0000 003A PORTD.4 = 0;
0000cd 985c      	CBI  0xB,4
                 ; 0000 003B if (PORTD.4 != 0)
0000ce 995c      	SBIC 0xB,4
                 ; 0000 003C PORTD.4 = 0;
0000cf 985c      	CBI  0xB,4
                 ; 0000 003D delay_ms(100);
0000d0 e6a4      	LDI  R26,LOW(100)
0000d1 e0b0      	LDI  R27,0
0000d2 d2c6      	RCALL _delay_ms
                 ; 0000 003E env_light = read_light();
0000d3 d025      	RCALL _read_light
0000d4 019f      	MOVW R18,R30
                 ; 0000 003F PORTD.4 = 1;
0000d5 9a5c      	SBI  0xB,4
                 ; 0000 0040 delay_ms(100);
0000d6 e6a4      	LDI  R26,LOW(100)
0000d7 e0b0      	LDI  R27,0
0000d8 d2c0      	RCALL _delay_ms
                 ; 0000 0041 }
                 ; 0000 0042 
                 ; 0000 0043 randomCheck_counter -= 1;
                 _0x11:
0000d9 5041      	SUBI R20,LOW(1)
                 ; 0000 0044 
                 ; 0000 0045 }
0000da cfcc      	RJMP _0x5
                 ; 0000 0046 }
                 _0x19:
0000db cfff      	RJMP _0x19
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0001 0004 unsigned int read_adc(unsigned char adc_input) {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0001 0005 
                 ; 0001 0006 // OR between adc input and type of adc reference 01 - AVcc reference
                 ; 0001 0007 ADMUX=adc_input | 0b01000000;
0000dc 931a      	ST   -Y,R17
0000dd 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
0000de 2fe1      	MOV  R30,R17
0000df 64e0      	ORI  R30,0x40
0000e0 93e0 007c 	STS  124,R30
                 ; 0001 0008 
                 ; 0001 0009 // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 000A delay_us(10);
                +
0000e2 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0000e3 958a     +DEC R24
0000e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0001 000B 
                 ; 0001 000C // Start the AD conversion
                 ; 0001 000D ADCSRA|=(1<<ADSC);
0000e5 91e0 007a 	LDS  R30,122
0000e7 64e0      	ORI  R30,0x40
0000e8 93e0 007a 	STS  122,R30
                 ; 0001 000E 
                 ; 0001 000F // Wait for the AD conversion to complete
                 ; 0001 0010 while ((ADCSRA & (1<<ADIF))==0);
                 _0x20003:
0000ea 91e0 007a 	LDS  R30,122
0000ec 71e0      	ANDI R30,LOW(0x10)
0000ed f3e1      	BREQ _0x20003
                 ; 0001 0011 
                 ; 0001 0012 ADCSRA|=(1<<ADIF);
0000ee 91e0 007a 	LDS  R30,122
0000f0 61e0      	ORI  R30,0x10
0000f1 93e0 007a 	STS  122,R30
                 ; 0001 0013 
                 ; 0001 0014 return ADCW;
0000f3 91e0 0078 	LDS  R30,120
0000f5 91f0 0079 	LDS  R31,120+1
0000f7 940c 0185 	JMP  _0x20A0001
                 ; 0001 0015 }
                 ; .FEND
                 ;unsigned int read_light() {
                 ; 0001 0018 unsigned int read_light() {
                 _read_light:
                 ; .FSTART _read_light
                 ; 0001 0019 
                 ; 0001 001A // reads the value of the light from PORTA.0
                 ; 0001 001B unsigned int light_level = read_adc(0b00000000);
                 ; 0001 001C return light_level;
0000f9 931a      	ST   -Y,R17
0000fa 930a      	ST   -Y,R16
                 ;	light_level -> R16,R17
0000fb e0a0      	LDI  R26,LOW(0)
0000fc dfdf      	RCALL _read_adc
0000fd 018f      	MOVW R16,R30
0000fe c014      	RJMP _0x20A0002
                 ; 0001 001D }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void ring_alarm(){
                 ; 0002 0003 void ring_alarm(){
                 
                 	.CSEG
                 _ring_alarm:
                 ; .FSTART _ring_alarm
                 ; 0002 0004 short int i;
                 ; 0002 0005 
                 ; 0002 0006 for (i = 0; i < 4; i++) {
0000ff 931a      	ST   -Y,R17
000100 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000101 e000     +LDI R16 , LOW ( 0 )
000102 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x40004:
                +
000103 3004     +CPI R16 , LOW ( 4 )
000104 e0e0     +LDI R30 , HIGH ( 4 )
000105 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000106 f45c      	BRGE _0x40005
                 ; 0002 0007 PORTD.3 = 0;
000107 985b      	CBI  0xB,3
                 ; 0002 0008 delay_ms(200);
000108 eca8      	LDI  R26,LOW(200)
000109 e0b0      	LDI  R27,0
00010a d28e      	RCALL _delay_ms
                 ; 0002 0009 PORTD.3 = 1;
00010b 9a5b      	SBI  0xB,3
                 ; 0002 000A delay_ms(200);
00010c eca8      	LDI  R26,LOW(200)
00010d e0b0      	LDI  R27,0
00010e d28a      	RCALL _delay_ms
                 ; 0002 000B }
                +
00010f 5f0f     +SUBI R16 , LOW ( - 1 )
000110 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000111 cff1      	RJMP _0x40004
                 _0x40005:
                 ; 0002 000C 
                 ; 0002 000D PORTD.3 = 0;
000112 985b      	CBI  0xB,3
                 ; 0002 000E }
                 _0x20A0002:
000113 9109      	LD   R16,Y+
000114 9119      	LD   R17,Y+
000115 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void initialise_mcu() {
                 ; 0003 0003 void initialise_mcu() {
                 
                 	.CSEG
                 _initialise_mcu:
                 ; .FSTART _initialise_mcu
                 ; 0003 0004 
                 ; 0003 0005 #pragma optsize-
                 ; 0003 0006 CLKPR=(1<<CLKPCE);
000116 e8e0      	LDI  R30,LOW(128)
000117 93e0 0061 	STS  97,R30
                 ; 0003 0007 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000119 e0e0      	LDI  R30,LOW(0)
00011a 93e0 0061 	STS  97,R30
                 ; 0003 0008 #ifdef _OPTIMIZE_SIZE_
                 ; 0003 0009 #pragma optsize+
                 ; 0003 000A #endif
                 ; 0003 000B 
                 ; 0003 000C // Port A initialization
                 ; 0003 000D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 000E DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00011c b9e1      	OUT  0x1,R30
                 ; 0003 000F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 0010 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00011d b9e2      	OUT  0x2,R30
                 ; 0003 0011 
                 ; 0003 0012 // Port B initialization
                 ; 0003 0013 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0003 0014 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
00011e e0e1      	LDI  R30,LOW(1)
00011f b9e4      	OUT  0x4,R30
                 ; 0003 0015 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 0016 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000120 e0e0      	LDI  R30,LOW(0)
000121 b9e5      	OUT  0x5,R30
                 ; 0003 0017 
                 ; 0003 0018 // Port C initialization
                 ; 0003 0019 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 001A DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000122 b9e7      	OUT  0x7,R30
                 ; 0003 001B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 001C PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000123 b9e8      	OUT  0x8,R30
                 ; 0003 001D 
                 ; 0003 001E // Port D initialization
                 ; 0003 001F // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 0020 DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (1<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000124 e5e8      	LDI  R30,LOW(88)
000125 b9ea      	OUT  0xA,R30
                 ; 0003 0021 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 0022 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000126 e0e0      	LDI  R30,LOW(0)
000127 b9eb      	OUT  0xB,R30
                 ; 0003 0023 
                 ; 0003 0024 // Timer/Counter 0 initialization
                 ; 0003 0025 // Clock source: System Clock
                 ; 0003 0026 // Clock value: Timer 0 Stopped
                 ; 0003 0027 // Mode: Normal top=0xFF
                 ; 0003 0028 // OC0A output: Disconnected
                 ; 0003 0029 // OC0B output: Disconnected
                 ; 0003 002A TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000128 bde4      	OUT  0x24,R30
                 ; 0003 002B TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000129 bde5      	OUT  0x25,R30
                 ; 0003 002C TCNT0=0x00;
00012a bde6      	OUT  0x26,R30
                 ; 0003 002D OCR0A=0x00;
00012b bde7      	OUT  0x27,R30
                 ; 0003 002E OCR0B=0x00;
00012c bde8      	OUT  0x28,R30
                 ; 0003 002F 
                 ; 0003 0030 // Timer/Counter 1 initialization
                 ; 0003 0031 // Clock source: System Clock
                 ; 0003 0032 // Clock value: Timer1 Stopped
                 ; 0003 0033 // Mode: Normal top=0xFFFF
                 ; 0003 0034 // OC1A output: Disconnected
                 ; 0003 0035 // OC1B output: Disconnected
                 ; 0003 0036 // Noise Canceler: Off
                 ; 0003 0037 // Input Capture on Falling Edge
                 ; 0003 0038 // Timer1 Overflow Interrupt: Off
                 ; 0003 0039 // Input Capture Interrupt: Off
                 ; 0003 003A // Compare A Match Interrupt: Off
                 ; 0003 003B // Compare B Match Interrupt: Off
                 ; 0003 003C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00012d 93e0 0080 	STS  128,R30
                 ; 0003 003D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00012f 93e0 0081 	STS  129,R30
                 ; 0003 003E TCNT1H=0x00;
000131 93e0 0085 	STS  133,R30
                 ; 0003 003F TCNT1L=0x00;
000133 93e0 0084 	STS  132,R30
                 ; 0003 0040 ICR1H=0x00;
000135 93e0 0087 	STS  135,R30
                 ; 0003 0041 ICR1L=0x00;
000137 93e0 0086 	STS  134,R30
                 ; 0003 0042 OCR1AH=0x00;
000139 93e0 0089 	STS  137,R30
                 ; 0003 0043 OCR1AL=0x00;
00013b 93e0 0088 	STS  136,R30
                 ; 0003 0044 OCR1BH=0x00;
00013d 93e0 008b 	STS  139,R30
                 ; 0003 0045 OCR1BL=0x00;
00013f 93e0 008a 	STS  138,R30
                 ; 0003 0046 
                 ; 0003 0047 // Timer/Counter 2 initialization
                 ; 0003 0048 // Clock source: System Clock
                 ; 0003 0049 // Clock value: Timer2 Stopped
                 ; 0003 004A // Mode: Normal top=0xFF
                 ; 0003 004B // OC2A output: Disconnected
                 ; 0003 004C // OC2B output: Disconnected
                 ; 0003 004D ASSR=(0<<EXCLK) | (0<<AS2);
000141 93e0 00b6 	STS  182,R30
                 ; 0003 004E TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000143 93e0 00b0 	STS  176,R30
                 ; 0003 004F TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000145 93e0 00b1 	STS  177,R30
                 ; 0003 0050 TCNT2=0x00;
000147 93e0 00b2 	STS  178,R30
                 ; 0003 0051 OCR2A=0x00;
000149 93e0 00b3 	STS  179,R30
                 ; 0003 0052 OCR2B=0x00;
00014b 93e0 00b4 	STS  180,R30
                 ; 0003 0053 
                 ; 0003 0054 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0003 0055 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
00014d 93e0 006e 	STS  110,R30
                 ; 0003 0056 
                 ; 0003 0057 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0003 0058 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00014f 93e0 006f 	STS  111,R30
                 ; 0003 0059 
                 ; 0003 005A // Timer/Counter 2 Interrupt(s) initialization
                 ; 0003 005B TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000151 93e0 0070 	STS  112,R30
                 ; 0003 005C 
                 ; 0003 005D // External Interrupt(s) initialization
                 ; 0003 005E // INT0: Off
                 ; 0003 005F // INT1: Off
                 ; 0003 0060 // INT2: Off
                 ; 0003 0061 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0003 0062 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0003 0063 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0003 0064 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0003 0065 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000153 93e0 0069 	STS  105,R30
                 ; 0003 0066 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
000155 bbed      	OUT  0x1D,R30
                 ; 0003 0067 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000156 93e0 0068 	STS  104,R30
                 ; 0003 0068 
                 ; 0003 0069 // USART0 initialization
                 ; 0003 006A // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 006B // USART0 Receiver: Off
                 ; 0003 006C // USART0 Transmitter: On
                 ; 0003 006D // USART0 Mode: Asynchronous
                 ; 0003 006E // USART0 Baud Rate: 9600
                 ; 0003 006F UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000158 93e0 00c0 	STS  192,R30
                 ; 0003 0070 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00015a e0e8      	LDI  R30,LOW(8)
00015b 93e0 00c1 	STS  193,R30
                 ; 0003 0071 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
00015d e0e6      	LDI  R30,LOW(6)
00015e 93e0 00c2 	STS  194,R30
                 ; 0003 0072 UBRR0H=0x00;
000160 e0e0      	LDI  R30,LOW(0)
000161 93e0 00c5 	STS  197,R30
                 ; 0003 0073 UBRR0L=0x81;
000163 e8e1      	LDI  R30,LOW(129)
000164 93e0 00c4 	STS  196,R30
                 ; 0003 0074 
                 ; 0003 0075 
                 ; 0003 0076 // USART1 initialization
                 ; 0003 0077 // USART1 disabled
                 ; 0003 0078 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000166 e0e0      	LDI  R30,LOW(0)
000167 93e0 00c9 	STS  201,R30
                 ; 0003 0079 
                 ; 0003 007A // Analog Comparator initialization
                 ; 0003 007B // Analog Comparator: Off
                 ; 0003 007C // The Analog Comparator's positive input is
                 ; 0003 007D // connected to the AIN0 pin
                 ; 0003 007E // The Analog Comparator's negative input is
                 ; 0003 007F // connected to the AIN1 pin
                 ; 0003 0080 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000169 e8e0      	LDI  R30,LOW(128)
00016a bfe0      	OUT  0x30,R30
                 ; 0003 0081 // Digital input buffer on AIN0: On
                 ; 0003 0082 // Digital input buffer on AIN1: On
                 ; 0003 0083 DIDR1=(0<<AIN0D) | (0<<AIN1D);
00016b e0e0      	LDI  R30,LOW(0)
00016c 93e0 007f 	STS  127,R30
                 ; 0003 0084 
                 ; 0003 0085 // ADC initialization
                 ; 0003 0086 // ADC Clock frequency: 625.000 kHz
                 ; 0003 0087 // ADC Voltage Reference: AREF pin
                 ; 0003 0088 // ADC Auto Trigger Source: Free Running
                 ; 0003 0089 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0003 008A // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0003 008B DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
00016e 93e0 007e 	STS  126,R30
                 ; 0003 008C ADMUX=0b01000000;
000170 e4e0      	LDI  R30,LOW(64)
000171 93e0 007c 	STS  124,R30
                 ; 0003 008D ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
000173 eae5      	LDI  R30,LOW(165)
000174 93e0 007a 	STS  122,R30
                 ; 0003 008E ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000176 e0e0      	LDI  R30,LOW(0)
000177 93e0 007b 	STS  123,R30
                 ; 0003 008F 
                 ; 0003 0090 // SPI initialization
                 ; 0003 0091 // SPI disabled
                 ; 0003 0092 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000179 bdec      	OUT  0x2C,R30
                 ; 0003 0093 
                 ; 0003 0094 // TWI initialization
                 ; 0003 0095 // TWI disabled
                 ; 0003 0096 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00017a 93e0 00bc 	STS  188,R30
                 ; 0003 0097 
                 ; 0003 0098 }
00017c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00017d 931a      	ST   -Y,R17
00017e 2f1a      	MOV  R17,R26
                 _0x2000006:
00017f 91e0 00c0 	LDS  R30,192
000181 72e0      	ANDI R30,LOW(0x20)
000182 f3e1      	BREQ _0x2000006
000183 9310 00c6 	STS  198,R17
                 _0x20A0001:
000185 9119      	LD   R17,Y+
000186 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000187 d1b7      	RCALL __SAVELOCR4
000188 018d      	MOVW R16,R26
000189 813c      	LDD  R19,Y+4
00018a 2fa3      	MOV  R26,R19
00018b dff1      	RCALL _putchar
00018c 01d8      	MOVW R26,R16
00018d 91ed      	LD   R30,X+
00018e 91fd      	LD   R31,X+
00018f 9631      	ADIW R30,1
000190 93fe      	ST   -X,R31
000191 93ee      	ST   -X,R30
000192 d1b3      	RCALL __LOADLOCR4
000193 9625      	ADIW R28,5
000194 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000195 93ba      	ST   -Y,R27
000196 93aa      	ST   -Y,R26
000197 9726      	SBIW R28,6
000198 d1a4      	RCALL __SAVELOCR6
000199 e010      	LDI  R17,0
00019a 85ac      	LDD  R26,Y+12
00019b 85bd      	LDD  R27,Y+12+1
00019c e0e0      	LDI  R30,LOW(0)
00019d e0f0      	LDI  R31,HIGH(0)
00019e 93ed      	ST   X+,R30
00019f 93fc      	ST   X,R31
                 _0x200001C:
0001a0 89ea      	LDD  R30,Y+18
0001a1 89fb      	LDD  R31,Y+18+1
0001a2 9631      	ADIW R30,1
0001a3 8bea      	STD  Y+18,R30
0001a4 8bfb      	STD  Y+18+1,R31
0001a5 9731      	SBIW R30,1
0001a6 91e4      	LPM  R30,Z
0001a7 2f2e      	MOV  R18,R30
0001a8 30e0      	CPI  R30,0
0001a9 f409      	BRNE PC+2
0001aa c10b      	RJMP _0x200001E
0001ab 2fe1      	MOV  R30,R17
0001ac 30e0      	CPI  R30,0
0001ad f431      	BRNE _0x2000022
0001ae 3225      	CPI  R18,37
0001af f411      	BRNE _0x2000023
0001b0 e011      	LDI  R17,LOW(1)
0001b1 c001      	RJMP _0x2000024
                 _0x2000023:
0001b2 d16d      	RCALL SUBOPT_0x1
                 _0x2000024:
0001b3 c101      	RJMP _0x2000021
                 _0x2000022:
0001b4 30e1      	CPI  R30,LOW(0x1)
0001b5 f4a1      	BRNE _0x2000025
0001b6 3225      	CPI  R18,37
0001b7 f411      	BRNE _0x2000026
0001b8 d167      	RCALL SUBOPT_0x1
0001b9 c0fa      	RJMP _0x20000D2
                 _0x2000026:
0001ba e012      	LDI  R17,LOW(2)
0001bb e040      	LDI  R20,LOW(0)
0001bc e000      	LDI  R16,LOW(0)
0001bd 322d      	CPI  R18,45
0001be f411      	BRNE _0x2000027
0001bf e001      	LDI  R16,LOW(1)
0001c0 c0f4      	RJMP _0x2000021
                 _0x2000027:
0001c1 322b      	CPI  R18,43
0001c2 f411      	BRNE _0x2000028
0001c3 e24b      	LDI  R20,LOW(43)
0001c4 c0f0      	RJMP _0x2000021
                 _0x2000028:
0001c5 3220      	CPI  R18,32
0001c6 f411      	BRNE _0x2000029
0001c7 e240      	LDI  R20,LOW(32)
0001c8 c0ec      	RJMP _0x2000021
                 _0x2000029:
0001c9 c002      	RJMP _0x200002A
                 _0x2000025:
0001ca 30e2      	CPI  R30,LOW(0x2)
0001cb f439      	BRNE _0x200002B
                 _0x200002A:
0001cc e050      	LDI  R21,LOW(0)
0001cd e013      	LDI  R17,LOW(3)
0001ce 3320      	CPI  R18,48
0001cf f411      	BRNE _0x200002C
0001d0 6800      	ORI  R16,LOW(128)
0001d1 c0e3      	RJMP _0x2000021
                 _0x200002C:
0001d2 c003      	RJMP _0x200002D
                 _0x200002B:
0001d3 30e3      	CPI  R30,LOW(0x3)
0001d4 f009      	BREQ PC+2
0001d5 c0df      	RJMP _0x2000021
                 _0x200002D:
0001d6 3320      	CPI  R18,48
0001d7 f010      	BRLO _0x2000030
0001d8 332a      	CPI  R18,58
0001d9 f008      	BRLO _0x2000031
                 _0x2000030:
0001da c007      	RJMP _0x200002F
                 _0x2000031:
0001db e0aa      	LDI  R26,LOW(10)
0001dc 9f5a      	MUL  R21,R26
0001dd 2d50      	MOV  R21,R0
0001de 2fe2      	MOV  R30,R18
0001df 53e0      	SUBI R30,LOW(48)
0001e0 0f5e      	ADD  R21,R30
0001e1 c0d3      	RJMP _0x2000021
                 _0x200002F:
0001e2 2fe2      	MOV  R30,R18
0001e3 36e3      	CPI  R30,LOW(0x63)
0001e4 f439      	BRNE _0x2000035
0001e5 d141      	RCALL SUBOPT_0x2
0001e6 89e8      	LDD  R30,Y+16
0001e7 89f9      	LDD  R31,Y+16+1
0001e8 81a4      	LDD  R26,Z+4
0001e9 93aa      	ST   -Y,R26
0001ea d142      	RCALL SUBOPT_0x3
0001eb c0c8      	RJMP _0x2000036
                 _0x2000035:
0001ec 37e3      	CPI  R30,LOW(0x73)
0001ed f429      	BRNE _0x2000038
0001ee d138      	RCALL SUBOPT_0x2
0001ef d143      	RCALL SUBOPT_0x4
0001f0 d10f      	RCALL _strlen
0001f1 2f1e      	MOV  R17,R30
0001f2 c007      	RJMP _0x2000039
                 _0x2000038:
0001f3 37e0      	CPI  R30,LOW(0x70)
0001f4 f449      	BRNE _0x200003B
0001f5 d131      	RCALL SUBOPT_0x2
0001f6 d13c      	RCALL SUBOPT_0x4
0001f7 d114      	RCALL _strlenf
0001f8 2f1e      	MOV  R17,R30
0001f9 6008      	ORI  R16,LOW(8)
                 _0x2000039:
0001fa 6002      	ORI  R16,LOW(2)
0001fb 770f      	ANDI R16,LOW(127)
0001fc e030      	LDI  R19,LOW(0)
0001fd c03a      	RJMP _0x200003C
                 _0x200003B:
0001fe 36e4      	CPI  R30,LOW(0x64)
0001ff f011      	BREQ _0x200003F
000200 36e9      	CPI  R30,LOW(0x69)
000201 f411      	BRNE _0x2000040
                 _0x200003F:
000202 6004      	ORI  R16,LOW(4)
000203 c002      	RJMP _0x2000041
                 _0x2000040:
000204 37e5      	CPI  R30,LOW(0x75)
000205 f431      	BRNE _0x2000042
                 _0x2000041:
000206 e7ec      	LDI  R30,LOW(_tbl10_G100*2)
000207 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000208 83ee      	STD  Y+6,R30
000209 83ff      	STD  Y+6+1,R31
00020a e015      	LDI  R17,LOW(5)
00020b c00c      	RJMP _0x2000043
                 _0x2000042:
00020c 35e8      	CPI  R30,LOW(0x58)
00020d f411      	BRNE _0x2000045
00020e 6008      	ORI  R16,LOW(8)
00020f c003      	RJMP _0x2000046
                 _0x2000045:
000210 37e8      	CPI  R30,LOW(0x78)
000211 f009      	BREQ PC+2
000212 c0a1      	RJMP _0x2000077
                 _0x2000046:
000213 e8e6      	LDI  R30,LOW(_tbl16_G100*2)
000214 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000215 83ee      	STD  Y+6,R30
000216 83ff      	STD  Y+6+1,R31
000217 e014      	LDI  R17,LOW(4)
                 _0x2000043:
000218 ff02      	SBRS R16,2
000219 c015      	RJMP _0x2000048
00021a d10c      	RCALL SUBOPT_0x2
00021b 89a8      	LDD  R26,Y+16
00021c 89b9      	LDD  R27,Y+16+1
00021d 9614      	ADIW R26,4
00021e 91ed      	LD   R30,X+
00021f 91fd      	LD   R31,X+
000220 87ea      	STD  Y+10,R30
000221 87fb      	STD  Y+10+1,R31
000222 85ab      	LDD  R26,Y+11
000223 23aa      	TST  R26
000224 f422      	BRPL _0x2000049
000225 d125      	RCALL __ANEGW1
000226 87ea      	STD  Y+10,R30
000227 87fb      	STD  Y+10+1,R31
000228 e24d      	LDI  R20,LOW(45)
                 _0x2000049:
000229 3040      	CPI  R20,0
00022a f011      	BREQ _0x200004A
00022b 5f1f      	SUBI R17,-LOW(1)
00022c c001      	RJMP _0x200004B
                 _0x200004A:
00022d 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
00022e c009      	RJMP _0x200004C
                 _0x2000048:
00022f d0f7      	RCALL SUBOPT_0x2
000230 89a8      	LDD  R26,Y+16
000231 89b9      	LDD  R27,Y+16+1
000232 9614      	ADIW R26,4
                +
000233 91ed     +LD R30 , X +
000234 91fc     +LD R31 , X
000235 9711     +SBIW R26 , 1
                 	__GETW1P
000236 87ea      	STD  Y+10,R30
000237 87fb      	STD  Y+10+1,R31
                 _0x200004C:
                 _0x200003C:
000238 fd00      	SBRC R16,0
000239 c010      	RJMP _0x200004D
                 _0x200004E:
00023a 1715      	CP   R17,R21
00023b f470      	BRSH _0x2000050
00023c ff07      	SBRS R16,7
00023d c008      	RJMP _0x2000051
00023e ff02      	SBRS R16,2
00023f c004      	RJMP _0x2000052
000240 7f0b      	ANDI R16,LOW(251)
000241 2f24      	MOV  R18,R20
000242 5011      	SUBI R17,LOW(1)
000243 c001      	RJMP _0x2000053
                 _0x2000052:
000244 e320      	LDI  R18,LOW(48)
                 _0x2000053:
000245 c001      	RJMP _0x2000054
                 _0x2000051:
000246 e220      	LDI  R18,LOW(32)
                 _0x2000054:
000247 d0d8      	RCALL SUBOPT_0x1
000248 5051      	SUBI R21,LOW(1)
000249 cff0      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
00024a 2f31      	MOV  R19,R17
00024b ff01      	SBRS R16,1
00024c c016      	RJMP _0x2000055
                 _0x2000056:
00024d 3030      	CPI  R19,0
00024e f099      	BREQ _0x2000058
00024f ff03      	SBRS R16,3
000250 c006      	RJMP _0x2000059
000251 81ee      	LDD  R30,Y+6
000252 81ff      	LDD  R31,Y+6+1
000253 9125      	LPM  R18,Z+
000254 83ee      	STD  Y+6,R30
000255 83ff      	STD  Y+6+1,R31
000256 c005      	RJMP _0x200005A
                 _0x2000059:
000257 81ae      	LDD  R26,Y+6
000258 81bf      	LDD  R27,Y+6+1
000259 912d      	LD   R18,X+
00025a 83ae      	STD  Y+6,R26
00025b 83bf      	STD  Y+6+1,R27
                 _0x200005A:
00025c d0c3      	RCALL SUBOPT_0x1
00025d 3050      	CPI  R21,0
00025e f009      	BREQ _0x200005B
00025f 5051      	SUBI R21,LOW(1)
                 _0x200005B:
000260 5031      	SUBI R19,LOW(1)
000261 cfeb      	RJMP _0x2000056
                 _0x2000058:
000262 c048      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
000263 e320      	LDI  R18,LOW(48)
000264 81ee      	LDD  R30,Y+6
000265 81ff      	LDD  R31,Y+6+1
000266 d129      	RCALL __GETW1PF
000267 87e8      	STD  Y+8,R30
000268 87f9      	STD  Y+8+1,R31
000269 81ee      	LDD  R30,Y+6
00026a 81ff      	LDD  R31,Y+6+1
00026b 9632      	ADIW R30,2
00026c 83ee      	STD  Y+6,R30
00026d 83ff      	STD  Y+6+1,R31
                 _0x2000060:
00026e 85e8      	LDD  R30,Y+8
00026f 85f9      	LDD  R31,Y+8+1
000270 85aa      	LDD  R26,Y+10
000271 85bb      	LDD  R27,Y+10+1
000272 17ae      	CP   R26,R30
000273 07bf      	CPC  R27,R31
000274 f050      	BRLO _0x2000062
000275 5f2f      	SUBI R18,-LOW(1)
000276 85a8      	LDD  R26,Y+8
000277 85b9      	LDD  R27,Y+8+1
000278 85ea      	LDD  R30,Y+10
000279 85fb      	LDD  R31,Y+10+1
00027a 1bea      	SUB  R30,R26
00027b 0bfb      	SBC  R31,R27
00027c 87ea      	STD  Y+10,R30
00027d 87fb      	STD  Y+10+1,R31
00027e cfef      	RJMP _0x2000060
                 _0x2000062:
00027f 332a      	CPI  R18,58
000280 f028      	BRLO _0x2000063
000281 ff03      	SBRS R16,3
000282 c002      	RJMP _0x2000064
000283 5f29      	SUBI R18,-LOW(7)
000284 c001      	RJMP _0x2000065
                 _0x2000064:
000285 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
000286 fd04      	SBRC R16,4
000287 c019      	RJMP _0x2000067
000288 3321      	CPI  R18,49
000289 f420      	BRSH _0x2000069
00028a 85a8      	LDD  R26,Y+8
00028b 85b9      	LDD  R27,Y+8+1
00028c 9711      	SBIW R26,1
00028d f409      	BRNE _0x2000068
                 _0x2000069:
00028e c009      	RJMP _0x20000D3
                 _0x2000068:
00028f 1753      	CP   R21,R19
000290 f010      	BRLO _0x200006D
000291 ff00      	SBRS R16,0
000292 c001      	RJMP _0x200006E
                 _0x200006D:
000293 c011      	RJMP _0x200006C
                 _0x200006E:
000294 e220      	LDI  R18,LOW(32)
000295 ff07      	SBRS R16,7
000296 c00a      	RJMP _0x200006F
000297 e320      	LDI  R18,LOW(48)
                 _0x20000D3:
000298 6100      	ORI  R16,LOW(16)
000299 ff02      	SBRS R16,2
00029a c006      	RJMP _0x2000070
00029b 7f0b      	ANDI R16,LOW(251)
00029c 934a      	ST   -Y,R20
00029d d08f      	RCALL SUBOPT_0x3
00029e 3050      	CPI  R21,0
00029f f009      	BREQ _0x2000071
0002a0 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
0002a1 d07e      	RCALL SUBOPT_0x1
0002a2 3050      	CPI  R21,0
0002a3 f009      	BREQ _0x2000072
0002a4 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
0002a5 5031      	SUBI R19,LOW(1)
0002a6 85a8      	LDD  R26,Y+8
0002a7 85b9      	LDD  R27,Y+8+1
0002a8 9712      	SBIW R26,2
0002a9 f008      	BRLO _0x200005F
0002aa cfb8      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
0002ab ff00      	SBRS R16,0
0002ac c007      	RJMP _0x2000073
                 _0x2000074:
0002ad 3050      	CPI  R21,0
0002ae f029      	BREQ _0x2000076
0002af 5051      	SUBI R21,LOW(1)
0002b0 e2e0      	LDI  R30,LOW(32)
0002b1 93ea      	ST   -Y,R30
0002b2 d07a      	RCALL SUBOPT_0x3
0002b3 cff9      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
0002b4 e010      	LDI  R17,LOW(0)
                 _0x2000021:
0002b5 ceea      	RJMP _0x200001C
                 _0x200001E:
0002b6 85ac      	LDD  R26,Y+12
0002b7 85bd      	LDD  R27,Y+12+1
0002b8 91ed      	LD   R30,X+
0002b9 91fd      	LD   R31,X+
0002ba d089      	RCALL __LOADLOCR6
0002bb 9664      	ADIW R28,20
0002bc 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002bd 92ff      	PUSH R15
0002be 2ef8      	MOV  R15,R24
0002bf 9726      	SBIW R28,6
0002c0 931a      	ST   -Y,R17
0002c1 930a      	ST   -Y,R16
0002c2 01de      	MOVW R26,R28
0002c3 9614      	ADIW R26,4
                +
0002c4 2400     +CLR R0
0002c5 0daf     +ADD R26 , R15
0002c6 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002c7 018d      	MOVW R16,R26
0002c8 e0e0      	LDI  R30,LOW(0)
0002c9 83ec      	STD  Y+4,R30
0002ca 83ed      	STD  Y+4+1,R30
0002cb 83ee      	STD  Y+6,R30
0002cc 83ef      	STD  Y+6+1,R30
0002cd 01de      	MOVW R26,R28
0002ce 9618      	ADIW R26,8
                +
0002cf 2400     +CLR R0
0002d0 0daf     +ADD R26 , R15
0002d1 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002d2 91ed      	LD   R30,X+
0002d3 91fd      	LD   R31,X+
0002d4 93fa      	ST   -Y,R31
0002d5 93ea      	ST   -Y,R30
0002d6 931a      	ST   -Y,R17
0002d7 930a      	ST   -Y,R16
0002d8 e8e7      	LDI  R30,LOW(_put_usart_G100)
0002d9 e0f1      	LDI  R31,HIGH(_put_usart_G100)
0002da 93fa      	ST   -Y,R31
0002db 93ea      	ST   -Y,R30
0002dc 01de      	MOVW R26,R28
0002dd 9618      	ADIW R26,8
0002de deb6      	RCALL __print_G100
0002df 8119      	LDD  R17,Y+1
0002e0 8108      	LDD  R16,Y+0
0002e1 9628      	ADIW R28,8
0002e2 90ff      	POP  R15
0002e3 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _rand:
                 ; .FSTART _rand
0002e4 91e0 0200 	LDS  R30,__seed_G101
0002e6 91f0 0201 	LDS  R31,__seed_G101+1
0002e8 9160 0202 	LDS  R22,__seed_G101+2
0002ea 9170 0203 	LDS  R23,__seed_G101+3
                +
0002ec e6ad     +LDI R26 , LOW ( 0x41C64E6D )
0002ed e4be     +LDI R27 , HIGH ( 0x41C64E6D )
0002ee ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
0002ef e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
0002f0 d05e      	RCALL __MULD12U
                +
0002f1 59ee     +SUBI R30 , LOW ( - 30562 )
0002f2 48f8     +SBCI R31 , HIGH ( - 30562 )
0002f3 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
0002f4 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
0002f5 93e0 0200 	STS  __seed_G101,R30
0002f7 93f0 0201 	STS  __seed_G101+1,R31
0002f9 9360 0202 	STS  __seed_G101+2,R22
0002fb 9370 0203 	STS  __seed_G101+3,R23
0002fd 01fb      	movw r30,r22
0002fe 77ff      	andi r31,0x7F
0002ff 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000300 93ba      	ST   -Y,R27
000301 93aa      	ST   -Y,R26
000302 91a9          ld   r26,y+
000303 91b9          ld   r27,y+
000304 27ee          clr  r30
000305 27ff          clr  r31
                 strlen0:
000306 916d          ld   r22,x+
000307 2366          tst  r22
000308 f011          breq strlen1
000309 9631          adiw r30,1
00030a cffb          rjmp strlen0
                 strlen1:
00030b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00030c 93ba      	ST   -Y,R27
00030d 93aa      	ST   -Y,R26
00030e 27aa          clr  r26
00030f 27bb          clr  r27
000310 91e9          ld   r30,y+
000311 91f9          ld   r31,y+
                 strlenf0:
000312 9005      	lpm  r0,z+
000313 2000          tst  r0
000314 f011          breq strlenf1
000315 9611          adiw r26,1
000316 cffb          rjmp strlenf0
                 strlenf1:
000317 01fd          movw r30,r26
000318 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000200           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000319 dfca      	RCALL _rand
00031a 01df      	MOVW R26,R30
00031b e4e6      	LDI  R30,LOW(70)
00031c e0f0      	LDI  R31,HIGH(70)
00031d d064      	RCALL __MODW21
00031e 2f4e      	MOV  R20,R30
00031f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
000320 932a      	ST   -Y,R18
000321 85ad      	LDD  R26,Y+13
000322 85be      	LDD  R27,Y+13+1
000323 85ef      	LDD  R30,Y+15
000324 89f8      	LDD  R31,Y+15+1
000325 9509      	ICALL
000326 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2:
000327 89e8      	LDD  R30,Y+16
000328 89f9      	LDD  R31,Y+16+1
000329 9734      	SBIW R30,4
00032a 8be8      	STD  Y+16,R30
00032b 8bf9      	STD  Y+16+1,R31
00032c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00032d 85ad      	LDD  R26,Y+13
00032e 85be      	LDD  R27,Y+13+1
00032f 85ef      	LDD  R30,Y+15
000330 89f8      	LDD  R31,Y+15+1
000331 9509      	ICALL
000332 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000333 89a8      	LDD  R26,Y+16
000334 89b9      	LDD  R27,Y+16+1
000335 9614      	ADIW R26,4
000336 91ed      	LD   R30,X+
000337 91fd      	LD   R31,X+
000338 83ee      	STD  Y+6,R30
000339 83ff      	STD  Y+6+1,R31
00033a 81ae      	LDD  R26,Y+6
00033b 81bf      	LDD  R27,Y+6+1
00033c 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00033d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00033e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00033f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000340 932a      	ST   -Y,R18
                 __SAVELOCR2:
000341 931a      	ST   -Y,R17
000342 930a      	ST   -Y,R16
000343 9508      	RET
                 
                 __LOADLOCR6:
000344 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000345 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000346 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000347 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000348 8119      	LDD  R17,Y+1
000349 8108      	LD   R16,Y
00034a 9508      	RET
                 
                 __ANEGW1:
00034b 95f1      	NEG  R31
00034c 95e1      	NEG  R30
00034d 40f0      	SBCI R31,0
00034e 9508      	RET
                 
                 __MULD12U:
00034f 9f7a      	MUL  R23,R26
000350 2d70      	MOV  R23,R0
000351 9f6b      	MUL  R22,R27
000352 0d70      	ADD  R23,R0
000353 9ff8      	MUL  R31,R24
000354 0d70      	ADD  R23,R0
000355 9fe9      	MUL  R30,R25
000356 0d70      	ADD  R23,R0
000357 9f6a      	MUL  R22,R26
000358 2d60      	MOV  R22,R0
000359 0d71      	ADD  R23,R1
00035a 9ffb      	MUL  R31,R27
00035b 0d60      	ADD  R22,R0
00035c 1d71      	ADC  R23,R1
00035d 9fe8      	MUL  R30,R24
00035e 0d60      	ADD  R22,R0
00035f 1d71      	ADC  R23,R1
000360 2788      	CLR  R24
000361 9ffa      	MUL  R31,R26
000362 2df0      	MOV  R31,R0
000363 0d61      	ADD  R22,R1
000364 1f78      	ADC  R23,R24
000365 9feb      	MUL  R30,R27
000366 0df0      	ADD  R31,R0
000367 1d61      	ADC  R22,R1
000368 1f78      	ADC  R23,R24
000369 9fea      	MUL  R30,R26
00036a 2de0      	MOV  R30,R0
00036b 0df1      	ADD  R31,R1
00036c 1f68      	ADC  R22,R24
00036d 1f78      	ADC  R23,R24
00036e 9508      	RET
                 
                 __DIVW21U:
00036f 2400      	CLR  R0
000370 2411      	CLR  R1
000371 e190      	LDI  R25,16
                 __DIVW21U1:
000372 0faa      	LSL  R26
000373 1fbb      	ROL  R27
000374 1c00      	ROL  R0
000375 1c11      	ROL  R1
000376 1a0e      	SUB  R0,R30
000377 0a1f      	SBC  R1,R31
000378 f418      	BRCC __DIVW21U2
000379 0e0e      	ADD  R0,R30
00037a 1e1f      	ADC  R1,R31
00037b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00037c 60a1      	SBR  R26,1
                 __DIVW21U3:
00037d 959a      	DEC  R25
00037e f799      	BRNE __DIVW21U1
00037f 01fd      	MOVW R30,R26
000380 01d0      	MOVW R26,R0
000381 9508      	RET
                 
                 __MODW21:
000382 94e8      	CLT
000383 ffb7      	SBRS R27,7
000384 c004      	RJMP __MODW211
000385 95b1      	NEG  R27
000386 95a1      	NEG  R26
000387 40b0      	SBCI R27,0
000388 9468      	SET
                 __MODW211:
000389 fdf7      	SBRC R31,7
00038a dfc0      	RCALL __ANEGW1
00038b dfe3      	RCALL __DIVW21U
00038c 01fd      	MOVW R30,R26
00038d f40e      	BRTC __MODW212
00038e dfbc      	RCALL __ANEGW1
                 __MODW212:
00038f 9508      	RET
                 
                 __GETW1PF:
000390 9005      	LPM  R0,Z+
000391 91f4      	LPM  R31,Z
000392 2de0      	MOV  R30,R0
000393 9508      	RET
                 
                 __PUTPARD1:
000394 937a      	ST   -Y,R23
000395 936a      	ST   -Y,R22
000396 93fa      	ST   -Y,R31
000397 93ea      	ST   -Y,R30
000398 9508      	RET
                 
                 _delay_ms:
000399 9610      	adiw r26,0
00039a f039      	breq __delay_ms1
                 __delay_ms0:
00039b 95a8      	wdr
                +
00039c e888     +LDI R24 , LOW ( 0x1388 )
00039d e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
00039e 9701     +SBIW R24 , 1
00039f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
0003a0 9711      	sbiw r26,1
0003a1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003a2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  28 r1 :  11 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  43 r17:  34 r18:  32 r19:  12 r20:  13 r21:  20 r22:  20 r23:  18 
r24:  21 r25:   7 r26:  73 r27:  40 r28:  10 r29:   1 r30: 202 r31:  65 
x  :  21 y  : 129 z  :  13 
Registers used: 22 out of 35 (62.9%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :  13 
adiw  :  16 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   3 cpi   :  32 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  33 ld    :  22 ldd   :  56 ldi   :  96 
lds   :  10 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  21 movw  :  21 
mul   :  11 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   9 out   :  22 pop   :   1 push  :   1 rcall :  49 ret   :  23 
reti  :   0 rjmp  :  57 rol   :   3 ror   :   0 sbc   :   2 sbci  :   6 
sbi   :   5 sbic  :   1 sbis  :   0 sbiw  :  12 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  43 std   :  30 sts   :  43 sub   :   2 subi  :  16 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000746   1772     90   1862   16384  11.4%
[.dseg] 0x000100 0x000204      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
